From 2dd040e0ff4440a04e7ad3a646555b1d8b23dc89 Mon Sep 17 00:00:00 2001
From: Rahul Rameshbabu <sergeantsagara@protonmail.com>
Date: Mon, 16 Jan 2023 09:51:20 -0800
Subject: [PATCH] external-browser: Instantiate AF_INET6 and Legacy IP sockets
 for loopback

Handle situations where loopback cannot be binded to AF_INET6.
  * The kernel can be configured to disable the IPv6 stack.
    - ipv6.disable=1 is set in the kernel commandline.
  * The system is configured to disable assigning IPv6 addresses.
    - sysctl configuration net.ipv6.conf.<ifname>.disable_ipv6 is set to 1.

Signed-off-by: Rahul Rameshbabu <sergeantsagara@protonmail.com>
---
 hpke.c                 | 94 +++++++++++++++++++++++++++++++++++-------
 openconnect-internal.h |  3 +-
 ssl.c                  | 44 +++++++++++++++++---
 3 files changed, 118 insertions(+), 23 deletions(-)

diff --git a/hpke.c b/hpke.c
index 551ae4c63..05709cb0c 100644
--- a/hpke.c
+++ b/hpke.c
@@ -111,18 +111,28 @@ static int spawn_browser(struct openconnect_info *vpninfo)
 int handle_external_browser(struct openconnect_info *vpninfo)
 {
 	int ret = 0;
+	uint16_t nport = htons(29786);
 	struct sockaddr_in6 sin6 = { };
+	struct sockaddr_in slegacy = { };
+	sin6.sin6_port = nport;
+	slegacy.sin_port = nport;
 	sin6.sin6_family = AF_INET6;
-	sin6.sin6_port = htons(29786);
+	slegacy.sin_family = AF_INET;
 	sin6.sin6_addr = in6addr_loopback;
+	slegacy.sin_addr.s_addr = htonl(INADDR_LOOPBACK);
 
-	int listen_fd;
+	int legacy_listen_fd, ipv6_listen_fd;
 #ifdef SOCK_CLOEXEC
-	listen_fd = socket(AF_INET6, SOCK_STREAM | SOCK_CLOEXEC, IPPROTO_TCP);
-	if (listen_fd < 0)
+	legacy_listen_fd = socket(AF_INET, SOCK_STREAM | SOCK_CLOEXEC, IPPROTO_TCP);
+	ipv6_listen_fd = socket(AF_INET6, SOCK_STREAM | SOCK_CLOEXEC, IPPROTO_TCP);
+	if (ipv6_listen_fd < 0 && legacy_listen_fd < 0) {
 #endif
-	listen_fd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
-	if (listen_fd < 0) {
+	legacy_listen_fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
+	ipv6_listen_fd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP);
+#ifdef SOCK_CLOEXEC
+	}
+#endif
+	if (ipv6_listen_fd < 0 && legacy_listen_fd < 0) {
 		char *errstr;
 	sockerr:
 #ifdef _WIN32
@@ -137,22 +147,64 @@ int handle_external_browser(struct openconnect_info *vpninfo)
 #ifdef _WIN32
 		free(errstr);
 #endif
-		if (listen_fd >= 0)
-			closesocket(listen_fd);
+		if (ipv6_listen_fd >= 0)
+			closesocket(ipv6_listen_fd);
+		if (legacy_listen_fd >= 0)
+			closesocket(legacy_listen_fd);
 		return -EIO;
 	}
 
 	int optval = 1;
-	(void)setsockopt(listen_fd, SOL_SOCKET, SO_REUSEADDR, (void *)&optval, sizeof(optval));
+	uint8_t ipv6_err = 0, legacy_err = 0;
+	if (legacy_listen_fd >= 0) {
+		(void)setsockopt(legacy_listen_fd, SOL_SOCKET, SO_REUSEADDR, (void *)&optval, sizeof(optval));
 
-	if (bind(listen_fd, (void *)&sin6, sizeof(sin6)) < 0)
-		goto sockerr;
+		if (bind(legacy_listen_fd, (void *)&slegacy, sizeof(slegacy)) < 0) {
+			legacy_err = 1;
+			goto ipv6_listen;
+		}
 
-	if (listen(listen_fd, 1))
-		goto sockerr;
+		if (listen(legacy_listen_fd, 1)) {
+			legacy_err = 1;
+			goto ipv6_listen;
+		}
+
+		if (set_sock_nonblock(legacy_listen_fd)) {
+			legacy_err = 1;
+			goto ipv6_listen;
+		}
+	}
+ipv6_listen:
+	if (ipv6_listen_fd >= 0) {
+		(void)setsockopt(ipv6_listen_fd, SOL_SOCKET, SO_REUSEADDR, (void *)&optval, sizeof(optval));
+		(void)setsockopt(ipv6_listen_fd, IPPROTO_IPV6, IPV6_V6ONLY, (void *)&optval, sizeof(optval));
+
+		if (bind(ipv6_listen_fd, (void *)&sin6, sizeof(sin6)) < 0) {
+			ipv6_err = 1;
+			goto listen_err;
+		}
 
-	if (set_sock_nonblock(listen_fd))
+		if (listen(ipv6_listen_fd, 1)) {
+			ipv6_err = 1;
+			goto listen_err;
+		}
+
+		if (set_sock_nonblock(ipv6_listen_fd)) {
+			ipv6_err = 1;
+			goto listen_err;
+		}
+	}
+listen_err:
+	if (ipv6_err && legacy_err)
 		goto sockerr;
+	if (ipv6_err) {
+		closesocket(ipv6_listen_fd);
+		ipv6_listen_fd = -1;
+	}
+	if (legacy_err) {
+		closesocket(legacy_listen_fd);
+		legacy_listen_fd = -1;
+	}
 
 	/* Now that we are listening on the socket, we can spawn the browser */
 	if (vpninfo->open_ext_browser) {
@@ -170,12 +222,19 @@ int handle_external_browser(struct openconnect_info *vpninfo)
 			     vpninfo->sso_login);
 
 	char *returl = NULL;
+	int listen_nfds = 0;
+	int listen_fds[2] = {-1};
 	struct oc_text_buf *b64_buf = NULL;
 
+	if (ipv6_listen_fd >= 0)
+	        listen_fds[listen_nfds++] = ipv6_listen_fd;
+	if (legacy_listen_fd >= 0)
+	        listen_fds[listen_nfds++] = legacy_listen_fd;
+
 	/* There may be other stray connections. Repeat until we have one
 	 * that looks like the actual auth attempt from the browser. */
 	while (1) {
-		int accept_fd = cancellable_accept(vpninfo, listen_fd);
+		int accept_fd = cancellable_accept(vpninfo, listen_fds, listen_nfds);
 		if (accept_fd < 0) {
 			ret = accept_fd;
 			goto out;
@@ -373,7 +432,10 @@ int handle_external_browser(struct openconnect_info *vpninfo)
  out_b64:
 	buf_free(b64_buf);
  out:
-	closesocket(listen_fd);
+	if (ipv6_listen_fd >= 0)
+	        closesocket(ipv6_listen_fd);
+	if (legacy_listen_fd >= 0)
+	        closesocket(legacy_listen_fd);
 	return ret;
 }
 #endif /* HAVE_HPKE_SUPPORT */
diff --git a/openconnect-internal.h b/openconnect-internal.h
index f19b4d81c..23b226ce6 100644
--- a/openconnect-internal.h
+++ b/openconnect-internal.h
@@ -1437,7 +1437,8 @@ int cancellable_send(struct openconnect_info *vpninfo, int fd,
 		     const char *buf, size_t len);
 int cancellable_recv(struct openconnect_info *vpninfo, int fd,
 		     char *buf, size_t len);
-int cancellable_accept(struct openconnect_info *vpninfo, int fd);
+int cancellable_accept(struct openconnect_info *vpninfo, int *fds,
+		       int num_fds);
 
 #if defined(OPENCONNECT_OPENSSL)
 /* openssl-pkcs11.c */
diff --git a/ssl.c b/ssl.c
index 22bd04d19..ac05c73d8 100644
--- a/ssl.c
+++ b/ssl.c
@@ -167,13 +167,48 @@ static inline int accept_pending(void)
 #endif
 }
 
-int cancellable_accept(struct openconnect_info *vpninfo, int sockfd)
+int cancellable_accept(struct openconnect_info *vpninfo, int *fds,
+		       int num_fds)
 {
-	fd_set wr_set, rd_set, ex_set;
-	int accept_fd, maxfd = sockfd;
+	fd_set wr_set, rd_set, ex_set, sock_set;
+	int accept_fd, maxfd, sockfd;
 	char *errstr;
 
 	do {
+		maxfd = -1;
+		sockfd = -1;
+		FD_ZERO(&wr_set);
+		FD_ZERO(&rd_set);
+		FD_ZERO(&ex_set);
+		FD_ZERO(&sock_set);
+
+		for (int idx = 0; idx < num_fds; ++idx) {
+			FD_SET(fds[idx], &sock_set);
+			if (fds[idx] > maxfd)
+				maxfd = fds[idx];
+		}
+
+		if (select(maxfd + 1, &sock_set, NULL, NULL, NULL) < 0 &&
+		    errno != EINTR) {
+			vpn_perror(vpninfo, _("Failed select() for socket choice"));
+			return -EIO;
+		} else if (errno == EINTR)
+			continue;
+
+		for (int idx = 0; idx < num_fds; ++idx) {
+			if (FD_ISSET(fds[idx], &sock_set)) {
+				sockfd = fds[idx];
+				maxfd = sockfd;
+				break;
+			}
+		}
+
+		if (sockfd == -1) {
+			vpn_progress(vpninfo, PRG_ERR,
+				     _("Read ready socket not found from select()\n"));
+			return -EBADF;
+		}
+
 		accept_fd = accept(sockfd, NULL, NULL);
 		if (accept_fd >= 0)
 			return accept_fd;
@@ -181,9 +216,6 @@ int cancellable_accept(struct openconnect_info *vpninfo, int sockfd)
 		if (!accept_pending())
 			break;
 
-		FD_ZERO(&wr_set);
-		FD_ZERO(&rd_set);
-		FD_ZERO(&ex_set);
 		FD_SET(sockfd, &rd_set);
 
 		cmd_fd_set(vpninfo, &rd_set, &maxfd);
-- 
GitLab

